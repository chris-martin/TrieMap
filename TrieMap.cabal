name:		     TrieMap
version:             4.0.0
cabal-version:       >= 1.6
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map, and can be used anywhere
                     @Data.Map@ can be used.
                     .
                     The most recent release combines zipper-based ideas from recently proposed changes to Data.Map, as well
                     as heavily optimized ByteString and Vector instances based on the vector package.
                     .
                     Benchmarks indicate that compared to @Data.Map@, @TrieMap@ is faster (1.4-1.9x) at @lookup@ 
                     and @splitLookup@ and tremendously (7-14x) faster for set operations (@union@, @difference@, @intersection).
                     
                     It is statistically tied on @insert@ and @findMin@/@findMax@.
                     
                     However, it is slightly slower at @fromList@ and considerably (2.5x) slower for @filter@, @elemAt@,
                     and @toList@.  @TrieMap@ tends to use somewhat more memory, and frequently perform better
                     with increased heap space and allocation area.
                     .
                     Compared to the @bytestring-trie-0.2.3@ package, this implementation has faster (~1.25x)
                     @insert@ and @lookup@ and significantly faster (2x) @toList@, but slower (2-3x) @filter@.
                     @bytestring-trie@ does not, however, support any of the other operations mentioned above,
                     and it needs /O(n)/ time for @size@, while @TrieMap@ offers /O(1)/ @size@.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-type:	     Simple
extra-source-files:  Tests.hs

source-repository head
  type:              git
  location:          git@github.com:lowasser/TrieMap.git

Library{
build-Depends:    base < 5.0.0.0, containers, template-haskell >= 2.5.0.0, bytestring >= 0.9.1.0, th-expand-syns,
                  vector >= 0.6, primitive >= 0.3, unpack-funcs >= 0.1.2
ghc-options:
  -Wall -fno-warn-name-shadowing -fno-warn-orphans -O2 -fno-spec-constr-count -fno-spec-constr-threshold
  -fno-liberate-case-threshold -fmax-worker-args=100
if impl(ghc >= 7.0.0)
  ghc-options: -fllvm -optlo-O3 -optlo-std-compile-opts
exposed-modules:  
  Data.TrieMap,
  Data.TrieSet,
  Data.TrieMap.Class,
  Data.TrieMap.Representation,
  Data.TrieMap.Modifiers
other-modules:
  Control.Monad.Ends,
  Data.TrieMap.TrieKey,
  Data.TrieMap.Utils,
  Data.TrieMap.Sized,
  Data.TrieMap.Subset,
  Data.TrieMap.Buildable,
  Data.TrieMap.SetOp,
  Data.TrieMap.Representation.Class,
  Data.TrieMap.Representation.TH,
  Data.TrieMap.Representation.TH.Utils,
  Data.TrieMap.Representation.TH.Representation,
  Data.TrieMap.Representation.TH.Factorized,
  Data.TrieMap.Representation.TH.ReprMonad,
  Data.TrieMap.Representation.Instances,
  Data.TrieMap.Representation.Instances.Basic,
  Data.TrieMap.Representation.Instances.Prim,
  Data.TrieMap.Representation.Instances.Foreign,
  Data.TrieMap.Representation.Instances.Vectors,
  Data.TrieMap.Representation.Instances.ByteString
  Data.TrieMap.WordMap,
  Data.TrieMap.OrdMap,
  Data.TrieMap.UnitMap,
  Data.TrieMap.ProdMap,
  Data.TrieMap.UnionMap,
  Data.TrieMap.ReverseMap,
  Data.TrieMap.Key,
  Data.TrieMap.RadixTrie,
  Data.TrieMap.RadixTrie.Slice,
  Data.TrieMap.RadixTrie.Edge,
  Data.TrieMap.RadixTrie.Label,
  Data.TrieMap.Class.Instances
}
