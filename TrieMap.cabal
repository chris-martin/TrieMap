name:		     TrieMap
version:             4.0.1
cabal-version:       >= 1.6
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map, and can be used anywhere
                     @Data.Map@ can be used.
                     .
                     The most recent release combines zipper-based ideas from recently proposed changes to Data.Map, as well
                     as heavily optimized ByteString and Vector instances based on the vector package.
                     
                     For best performance, use @cabal install -fllvm -O2@.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-type:	     Simple
extra-source-files:
  Data/TrieMap/Tests.hs
  Data/TrieMap/Arbitrary.hs
  Data/TrieMap/TrieKey/Tests.hs
  Data/TrieMap/TrieKey/Buildable/Tests.hs
  Data/TrieMap/TrieKey/Projection/Tests.hs
  Data/TrieMap/TrieKey/SetOp/Tests.hs
  Data/TrieMap/TrieKey/Subset/Tests.hs
  Data/TrieMap/TrieKey/Tests/Utils.hs
  Data/TrieMap/OrdMap/Tests.hs
  Data/TrieMap/ProdMap/Tests.hs
  Data/TrieMap/RadixTrie/Tests.hs
  Data/TrieMap/ReverseMap/Tests.hs
  Data/TrieMap/UnionMap/Tests.hs
  Data/TrieMap/UnitMap/Tests.hs
  Data/TrieMap/WordMap/Tests.hs
  Data/TrieMap/Representation/Tests.hs
  Data/TrieMap/Representation/Instances/Tests.hs
  Data/TrieMap/Representation/Instances/Prim/Tests.hs
  Data/TrieMap/Representation/Instances/Foreign/Tests.hs
  Data/TrieMap/Representation/Instances/ByteString/Tests.hs
  Data/TrieMap/Representation/Instances/Vectors/Tests.hs
  Data/TrieMap/Representation/TH/Tests.hs
  
source-repository head
  type:              git
  location:          git@github.com:lowasser/TrieMap.git

Flag LLVM {
  Description: Compile with LLVM, because you mean srs bzns
  Default: False
}

Library{
build-Depends:    base < 5.0.0.0, containers, template-haskell >= 2.5.0.0, bytestring >= 0.9.1.0, th-expand-syns,
                  vector >= 0.6, primitive >= 0.3, unpack-funcs >= 0.1.2, transformers >= 0.2.0.0
ghc-options:
  -Wall -fno-warn-name-shadowing -fno-warn-orphans -fno-spec-constr-count -fno-spec-constr-threshold
  -fno-liberate-case-threshold -fmax-worker-args=100
if impl(ghc >= 7.0.0) && flag(LLVM)
  ghc-options: -fllvm -optlo-O3 -optlo-std-compile-opts
exposed-modules:  
  Data.TrieMap,
  Data.TrieSet,
  Data.TrieMap.Class,
  Data.TrieMap.Representation,
  Data.TrieMap.Modifiers
other-modules:
  Data.TrieMap.ReverseMap.Dual
  Data.TrieMap.Representation.Instances.Prim.Bool
  Data.Functor.Immoral
  Data.TrieMap.RadixTrie.Slice
  Data.TrieMap.Representation.TH.Utils
  Data.Vector.Build
  Data.TrieMap.Utils
  Data.TrieMap.Representation.Class
  Data.TrieMap.Representation.TH.ReprMonad
  Data.TrieMap.Representation.TH.Representation
  Data.TrieMap.Representation.TH.Factorized
  Data.TrieMap.Representation.TH
  Data.TrieMap.Representation.Instances.Basic
  Data.TrieMap.Representation.Instances.Prim
  Data.TrieMap.Representation.Instances.Foreign
  Data.TrieMap.Representation.Instances.Vectors
  Data.TrieMap.Representation.Instances.ByteString
  Data.TrieMap.Representation.Instances
  Data.TrieMap.TrieKey.Subset
  Data.TrieMap.Sized
  Data.TrieMap.TrieKey.SetOp
  Data.TrieMap.TrieKey.Projection
  Data.TrieMap.TrieKey.Zippable
  Data.TrieMap.TrieKey.Splittable
  Data.TrieMap.TrieKey.Indexable
  Control.Monad.Option
  Data.TrieMap.TrieKey.Searchable
  Data.TrieMap.TrieKey.Buildable
  Control.Monad.Ends
  Data.TrieMap.TrieKey.Alternatable
  Data.TrieMap.TrieKey
  Data.TrieMap.UnitMap
  Data.TrieMap.ReverseMap
  Data.TrieMap.Key
  Data.TrieMap.UnionMap.Base
  Data.TrieMap.UnionMap.Traversable
  Data.TrieMap.UnionMap.Subset
  Data.TrieMap.UnionMap.SetOp
  Data.TrieMap.UnionMap.Projection
  Data.TrieMap.UnionMap.Splittable
  Data.TrieMap.UnionMap.Indexable
  Data.TrieMap.UnionMap.Alternatable
  Data.TrieMap.UnionMap.Zippable
  Data.TrieMap.UnionMap.Searchable
  Data.TrieMap.UnionMap.Buildable
  Data.TrieMap.UnionMap
  Data.TrieMap.ProdMap.Base
  Data.TrieMap.ProdMap.Traversable
  Data.TrieMap.ProdMap.Zippable
  Data.TrieMap.ProdMap.Searchable
  Data.TrieMap.ProdMap.Splittable
  Data.TrieMap.ProdMap.SetOp
  Data.TrieMap.ProdMap.Buildable
  Data.TrieMap.ProdMap.Indexable
  Data.TrieMap.ProdMap
  Data.TrieMap.OrdMap.Base
  Data.TrieMap.OrdMap.Alternatable
  Data.TrieMap.OrdMap.Traversable
  Data.TrieMap.OrdMap.Projection
  Data.TrieMap.OrdMap.Zippable
  Data.TrieMap.OrdMap.Searchable
  Data.TrieMap.OrdMap.Buildable
  Data.TrieMap.OrdMap.Indexable
  Data.TrieMap.OrdMap.Splittable
  Data.TrieMap.OrdMap.Subset
  Data.TrieMap.OrdMap.SetOp
  Data.TrieMap.OrdMap
  Data.TrieMap.WordMap.Base
  Data.TrieMap.WordMap.Zippable
  Data.TrieMap.WordMap.Searchable
  Data.TrieMap.WordMap.Indexable
  Data.TrieMap.WordMap.Splittable
  Data.TrieMap.WordMap.Projection
  Data.TrieMap.WordMap.Subset
  Data.TrieMap.WordMap.SetOp
  Data.TrieMap.WordMap.Traversable
  Data.TrieMap.WordMap.Buildable
  Data.TrieMap.WordMap.Alternatable
  Data.TrieMap.WordMap
  Data.TrieMap.RadixTrie.Label
  Data.TrieMap.RadixTrie.Base
  Data.TrieMap.RadixTrie.Traversable
  Data.TrieMap.RadixTrie.Subset
  Data.TrieMap.RadixTrie.Project
  Data.TrieMap.RadixTrie.Zipper
  Data.TrieMap.RadixTrie.Split
  Data.TrieMap.RadixTrie.Index
  Data.TrieMap.RadixTrie.Alternate
  Data.TrieMap.RadixTrie.Search
  Data.TrieMap.RadixTrie.SetOp
  Data.TrieMap.RadixTrie.Build
  Data.TrieMap.RadixTrie
  Data.TrieMap.Class.Instances
}
